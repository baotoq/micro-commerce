version: '3.8'

services:
  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    restart: on-failure
    networks:
      - backend

  postgres:
    image: postgres:latest
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: on-failure
    networks:
      - backend

  zipkin:
    image: openzipkin/zipkin:latest
    restart: on-failure
    networks:
      - backend

  seq:
    image: datalust/seq:latest
    volumes:
      - seq-data:/data
    environment:
      - ACCEPT_EULA=Y
    restart: on-failure
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "19090:9090"
    volumes:
      - ./config:/etc/prometheus
      - prometheus-data:/prometheus
    restart: on-failure
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=P@ssw0rd
      - PROMETHEUS_URL=http://prometheus:9090
      - DASHBOARDS_BACKUP_FOLDER=/var/lib/grafana/dashboards
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboard-backup:/var/lib/grafana/dashboards
    ports:
      - "13000:3000"
    restart: on-failure
    networks:
      - backend

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./config:/etc/alertmanager
      - alertmanager-data:/alertmanager
    ports:
      - "19093:9093"
    restart: on-failure
    networks:
      - backend

  basket-api:
    image: ${DOCKER_REGISTRY-}microcommerce-basket-api
    build:
      context: .
      dockerfile: Services/Basket/MicroCommerce.Basket.API/Dockerfile
    restart: on-failure
    networks:
      - backend

  catalog-api:
    image: ${DOCKER_REGISTRY-}microcommerce-catalog-api
    build:
      context: .
      dockerfile: Services/Catalog/MicroCommerce.Catalog.API/Dockerfile
    restart: on-failure
    networks:
      - backend

  ordering-api:
    image: ${DOCKER_REGISTRY-}microcommerce-ordering-api
    build:
      context: .
      dockerfile: Services/Ordering/MicroCommerce.Ordering.API/Dockerfile
    restart: on-failure
    networks:
      - backend

  identity-api:
    image: ${DOCKER_REGISTRY-}microcommerce-identity-api
    build:
      context: .
      dockerfile: Services/Identity/MicroCommerce.Identity.API/Dockerfile
    restart: on-failure
    networks:
      - backend

volumes:
  postgres-data:
  redis-data:
  seq-data:
  alertmanager-data:
  prometheus-data:

networks:
  frontend:
  backend: