version: '3.8'

services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy
    container_name: microcommerce-nginx-proxy
    restart: on-failure

  redis:
    image: redis:alpine
    container_name: microcommerce-redis
    restart: on-failure

  postgres:
    image: postgres:latest
    container_name: microcommerce-postgres
    restart: on-failure

  flyway:
    image: flyway/flyway:latest-alpine
    container_name: microcommerce-flyway
    restart: on-failure
    depends_on:
      - postgres

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: microcommerce-zipkin
    restart: on-failure

  seq:
    image: datalust/seq:latest
    container_name: microcommerce-seq
    restart: on-failure

  prometheus:
    image: prom/prometheus:latest
    container_name: microcommerce-prometheus
    restart: on-failure

  grafana:
    image: grafana/grafana:latest
    container_name: microcommerce-grafana
    restart: on-failure

  alertmanager:
    image: prom/alertmanager:latest
    container_name: microcommerce-alertmanager
    restart: on-failure

  mail:
    image: jijiechen/papercut:latest
    container_name: microcommerce-mail
    restart: on-failure

  basket-api:
    image: ${DOCKER_REGISTRY-}microcommerce-basket-api
    container_name: microcommerce-basket-api
    build:
      context: .
      dockerfile: Services/Basket/MicroCommerce.Basket.API/Dockerfile
    restart: on-failure

  basket-api-dapr:
    image: daprio/daprd:latest
    container_name: microcommerce-basket-api-dapr
    command: [ "./daprd", "-app-id", "basket-api", "-app-port", "80", "-app-protocol", "http",
      "-placement-host-address", "dapr-placement:50005",
      "-components-path", "/components", "-config", "/config.yaml"
    ]
    depends_on:
      - basket-api
    volumes:
      - ./dapr/components:/components
      - ./dapr/config.yaml:/config.yaml
    network_mode: "service:basket-api"
    restart: on-failure

  catalog-api:
    image: ${DOCKER_REGISTRY-}microcommerce-catalog-api
    container_name: microcommerce-catalog-api
    build:
      context: .
      dockerfile: Services/Catalog/MicroCommerce.Catalog.API/Dockerfile
    restart: on-failure

  catalog-api-dapr:
    image: daprio/daprd:latest
    container_name: microcommerce-catalog-api-dapr
    command: [ "./daprd", "-app-id", "catalog-api", "-app-port", "80", "-app-protocol", "http",
      "-placement-host-address", "dapr-placement:50005",
      "-components-path", "/components", "-config", "/config.yaml"
    ]
    depends_on:
      - catalog-api
    volumes:
      - ./dapr/components:/components
      - ./dapr/config.yaml:/config.yaml
      - ./dapr/catalog/binding-cron-test.yaml:/components/binding-cron-test.yaml
    network_mode: "service:catalog-api"
    restart: on-failure

  ordering-api:
    image: ${DOCKER_REGISTRY-}microcommerce-ordering-api
    container_name: microcommerce-ordering-api
    build:
      context: .
      dockerfile: Services/Ordering/MicroCommerce.Ordering.API/Dockerfile
    restart: on-failure

  ordering-api-dapr:
    image: daprio/daprd:latest
    container_name: microcommerce-ordering-api-dapr
    command: [ "./daprd", "-app-id", "ordering-api", "-app-port", "80", "-app-protocol", "http",
      "-placement-host-address", "dapr-placement:50005",
      "-components-path", "/components", "-config", "/config.yaml"
    ]
    depends_on:
      - ordering-api
    volumes:
      - ./dapr/components:/components"
      - ./dapr/config.yaml:/config.yaml
    network_mode: "service:ordering-api"
    restart: on-failure

  identity-web:
    image: ${DOCKER_REGISTRY-}microcommerce-identity-web
    container_name: microcommerce-identity-web
    build:
      context: .
      dockerfile: Services/Identity/MicroCommerce.Identity.Web/Dockerfile
    restart: on-failure

  identity-web-dapr:
    image: daprio/daprd:latest
    container_name: microcommerce-identity-web-dapr
    command: [ "./daprd", "-app-id", "identity-web", "-app-port", "80", "-app-protocol", "http",
      "-placement-host-address", "dapr-placement:50005",
      "-components-path", "/components", "-config", "/config.yaml"
    ]
    depends_on:
      - identity-web
    volumes:
      - ./dapr/components:/components
      - ./dapr/config.yaml:/config.yaml
    network_mode: service:identity-web
    restart: on-failure

  gateway-api:
    image: ${DOCKER_REGISTRY-}ocelot-gateway-api
    container_name: microcommerce-gateway-api
    build:
      context: .
      dockerfile: Gateways/OcelotGateway.API/Dockerfile
    restart: on-failure

  gateway-api-dapr:
    image: daprio/daprd:latest
    container_name: microcommerce-gateway-api-dapr
    command: [ "./daprd", "-app-id", "gateway-api", "-app-port", "80", "-app-protocol", "http",
      "-placement-host-address", "dapr-placement:50005",
      "-components-path", "/components", "-config", "/config.yaml"
    ]
    depends_on:
      - gateway-api
    volumes:
      - ./dapr/components:/components
      - ./dapr/config.yaml:/config.yaml
    network_mode: service:gateway-api
    restart: on-failure

  healthchecks-web:
    image: ${DOCKER_REGISTRY-}healthchecks-web
    container_name: microcommerce-healthchecks-web
    build:
      context: .
      dockerfile: Webs/HealthChecks.Web/Dockerfile
    restart: on-failure

  healthchecks-web-dapr:
    image: daprio/daprd:latest
    container_name: microcommerce-healthchecks-web-dapr
    command: [ "./daprd", "-app-id", "healthchecks-web", "-app-port", "80", "-app-protocol", "http",
      "-placement-host-address", "dapr-placement:50005",
      "-components-path", "/components", "-config", "/config.yaml"
    ]
    depends_on:
      - healthchecks-web
    volumes:
      - ./dapr/components:/components
      - ./dapr/config.yaml:/config.yaml
    network_mode: service:healthchecks-web
    restart: on-failure

  dapr-placement:
    image: daprio/placement
    command: ["./placement", "-port", "50005"]
    ports:
      - 50006:50005
    restart: on-failure
